#!/usr/bin/env python3
"""
DreamLayer CLI Tool

Main command-line interface for DreamLayer AI utilities.
"""

import os
import sys
import argparse
from pathlib import Path

# Add the dream_layer_backend directory to the Python path
current_dir = Path(__file__).parent
backend_dir = current_dir / "dream_layer_backend"
sys.path.insert(0, str(backend_dir))

def main():
    """Main CLI entry point."""
    parser = argparse.ArgumentParser(description='DreamLayer AI CLI Tool')
    subparsers = parser.add_subparsers(dest='command', help='Available commands')
    
    # LoRA merge command
    merge_parser = subparsers.add_parser('merge-lora', help='Merge LoRA with base model')
    merge_parser.add_argument('base_model', help='Path to base model (.safetensors)')
    merge_parser.add_argument('lora_model', help='Path to LoRA model (.safetensors)')
    merge_parser.add_argument('output_model', help='Path to save merged model (.safetensors)')
    merge_parser.add_argument('--alpha', type=float, default=1.0, help='LoRA strength (default: 1.0)')
    merge_parser.add_argument('--device', choices=['auto', 'cpu', 'cuda'], default='auto', 
                             help='Device to use (default: auto)')
    
    # Test command
    test_parser = subparsers.add_parser('test-lora', help='Run LoRA merge test with dummy checkpoints')
    test_parser.add_argument('--temp-dir', default='./temp_test', help='Temporary directory for test files')
    
    # Version command
    version_parser = subparsers.add_parser('version', help='Show version information')
    
    args = parser.parse_args()
    
    if args.command == 'merge-lora':
        # Import and run LoRA merge
        try:
            from lora_merge import merge_lora_with_base
            
            print(f"üîÑ Merging LoRA...")
            print(f"   Base model: {args.base_model}")
            print(f"   LoRA model: {args.lora_model}")
            print(f"   Output: {args.output_model}")
            print(f"   Alpha: {args.alpha}")
            print(f"   Device: {args.device}")
            print()
            
            success = merge_lora_with_base(
                args.base_model, 
                args.lora_model, 
                args.output_model,
                alpha=args.alpha,
                device=args.device
            )
            
            if success:
                print("‚úÖ LoRA merge completed successfully!")
                
                # Check output file size
                if os.path.exists(args.output_model):
                    size_mb = os.path.getsize(args.output_model) / (1024 * 1024)
                    print(f"   Output file size: {size_mb:.2f} MB")
                
            else:
                print("‚ùå LoRA merge failed. Check logs for details.")
                sys.exit(1)
                
        except ImportError as e:
            print(f"‚ùå Error: Required dependencies not installed: {e}")
            print("Please install required packages with:")
            print("pip install -r dream_layer_backend/requirements.txt")
            sys.exit(1)
        except Exception as e:
            print(f"‚ùå Error: {e}")
            sys.exit(1)
    
    elif args.command == 'test-lora':
        # Import and run test
        try:
            from lora_merge import create_dummy_checkpoint, create_dummy_lora, merge_lora_with_base
            import tempfile
            import shutil
            
            print("üß™ Running LoRA merge test...")
            
            # Create temporary directory
            temp_dir = Path(args.temp_dir)
            temp_dir.mkdir(exist_ok=True)
            
            try:
                # Create dummy files
                base_path = temp_dir / "test_base.safetensors"
                lora_path = temp_dir / "test_lora.safetensors"
                output_path = temp_dir / "test_merged.safetensors"
                
                print("üìù Creating dummy test files...")
                create_dummy_checkpoint(str(base_path), size_mb=0.5)
                create_dummy_lora(str(lora_path), size_mb=0.05)
                
                print("üîÑ Testing merge operation...")
                success = merge_lora_with_base(
                    str(base_path),
                    str(lora_path),
                    str(output_path),
                    alpha=0.8,
                    device='cpu'
                )
                
                # Verify output
                if success and output_path.exists() and output_path.stat().st_size > 0:
                    size_mb = output_path.stat().st_size / (1024 * 1024)
                    print(f"‚úÖ Test passed!")
                    print(f"   Output file: {output_path}")
                    print(f"   File size: {size_mb:.2f} MB")
                    print(f"   File exists: {output_path.exists()}")
                    print(f"   Size > 0: {output_path.stat().st_size > 0}")
                else:
                    print("‚ùå Test failed! Output file not created or empty.")
                    sys.exit(1)
                    
            finally:
                # Clean up
                if temp_dir.exists():
                    shutil.rmtree(temp_dir)
                    print("üßπ Cleaned up test files")
                    
        except ImportError as e:
            print(f"‚ùå Error: Required dependencies not installed: {e}")
            print("Please install required packages with:")
            print("pip install -r dream_layer_backend/requirements.txt")
            sys.exit(1)
        except Exception as e:
            print(f"‚ùå Test failed: {e}")
            sys.exit(1)
    
    elif args.command == 'version':
        print("DreamLayer AI CLI Tool")
        print("Version: 1.0.0")
        print("LoRA Auto-Merge Utility")
        
    else:
        parser.print_help()

if __name__ == "__main__":
    main()